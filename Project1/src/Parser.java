/* Parser.java */
/* Generated By:JavaCC: Do not edit this line. Parser.java */
import java.lang.Character;
import java.util.HashMap;
public class Parser implements ParserConstants {
    static HashMap<String ,String> map=new HashMap<>();
    public static void main(String[] args) throws Exception {
        System.out.println(new Parser(System.in).create());
    }
    static String arranger(){
            String decorated="";
            if(map.containsKey("href")){
               decorated+=" href=\""+map.get("href")+"\"";
           }

           if(map.containsKey("color")){
               decorated+=" style=\"color:"+map.get("color")+";";
           }

           if(map.containsKey("font") && map.containsKey("color")){
                   decorated+="font-family:"+ map.get("font") +";\"";
               }
           else if(map.containsKey("color")){
               decorated+="\"";
           }
           else if(map.containsKey("font")){
               decorated+=" style=\"font-family:"+ map.get("font") +";\"";
           }
           if(map.containsKey("text")){
               decorated+=">"+map.get("text");
           }
           return decorated;
       }

  static final public String create() throws ParseException {String s;
    jj_consume_token(5);
    s = element();
map.clear();
         {if ("" != null) return s;}
    throw new Error("Missing return statement in function");
}

  static final public String element() throws ParseException {String s;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case 6:{
      s = img();
{if ("" != null) return s;}
      break;
      }
    case 9:{
      s = header();
{if ("" != null) return s;}
      break;
      }
    case 10:{
      s = para();
{if ("" != null) return s;}
      break;
      }
    case 11:{
      s = url();
{if ("" != null) return s;}
      break;
      }
    default:
      jj_la1[0] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
}

  static final public String img() throws ParseException {String s="";
    jj_consume_token(6);
    jj_consume_token(7);
    jj_consume_token(8);
    jj_consume_token(quote);
    s = sentence();
    jj_consume_token(quote);
{if ("" != null) return "<img src=\"" + s + "\" />";}
    throw new Error("Missing return statement in function");
}

  static final public String header() throws ParseException {String s="";
    jj_consume_token(9);
    s = decorated_text();
{if ("" != null) return "<h1"+s+"</h1>";}
    throw new Error("Missing return statement in function");
}

  static final public String para() throws ParseException {String s="";
    jj_consume_token(10);
    s = decorated_text();
{if ("" != null) return "<p"+s+"</p>";}
    throw new Error("Missing return statement in function");
}

  static final public String url() throws ParseException {String s="";
    jj_consume_token(11);
    s = decorated_url();
{if ("" != null) return "<a"+s+"</a>";}
    throw new Error("Missing return statement in function");
}

  static final public String sentence() throws ParseException {String s="";Token c;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case alphanumeric:{
      c = jj_consume_token(alphanumeric);
      s = sentence();
{if ("" != null) return c.image + s;}
      break;
      }
    default:
      jj_la1[1] = jj_gen;
{if ("" != null) return "";}
    }
    throw new Error("Missing return statement in function");
}

  static final public String decorated_text() throws ParseException {String decorated="";
    decorated_text_part();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case 12:{
      jj_consume_token(12);
      decorated_text();
      break;
      }
    case 13:{
      jj_consume_token(13);
      break;
      }
    default:
      jj_la1[2] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return arranger();}
    throw new Error("Missing return statement in function");
}

  static final public void decorated_text_part() throws ParseException {
    jj_consume_token(7);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case 14:{
      text();
      break;
      }
    case 15:{
      color();
      break;
      }
    case 16:{
      font();
      break;
      }
    default:
      jj_la1[3] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
}

  static final public String decorated_url() throws ParseException {String decorated="";
    decorated_url_part();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case 12:{
      jj_consume_token(12);
      decorated_url();
      break;
      }
    case 13:{
      jj_consume_token(13);
      break;
      }
    default:
      jj_la1[4] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return arranger();}
    throw new Error("Missing return statement in function");
}

  static final public void decorated_url_part() throws ParseException {
    jj_consume_token(7);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case 14:{
      text();
      break;
      }
    case 15:{
      color();
      break;
      }
    case 16:{
      font();
      break;
      }
    case 11:{
      link();
      break;
      }
    default:
      jj_la1[5] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
}

  static final public void link() throws ParseException {String s="";
    jj_consume_token(11);
    jj_consume_token(quote);
    s = sentence();
    jj_consume_token(quote);
map.put("href",s);
}

  static final public void text() throws ParseException {String s="";
    jj_consume_token(14);
    jj_consume_token(quote);
    s = sentence();
    jj_consume_token(quote);
map.put("text",s);
}

  static final public void color() throws ParseException {String s="";
    jj_consume_token(15);
    jj_consume_token(quote);
    s = sentence();
    jj_consume_token(quote);
map.put("color",s);
}

  static final public void font() throws ParseException {String s="";
    jj_consume_token(16);
    jj_consume_token(quote);
    s = sentence();
    jj_consume_token(quote);
map.put("font",s);
}

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public ParserTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[6];
  static private int[] jj_la1_0;
  static {
	   jj_la1_init_0();
	}
	private static void jj_la1_init_0() {
	   jj_la1_0 = new int[] {0xe40,0x10,0x3000,0x1c000,0x3000,0x1c800,};
	}

  /** Constructor with InputStream. */
  public Parser(java.io.InputStream stream) {
	  this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Parser(java.io.InputStream stream, String encoding) {
	 if (jj_initialized_once) {
	   System.out.println("ERROR: Second call to constructor of static parser.  ");
	   System.out.println("	   You must either use ReInit() or set the JavaCC option STATIC to false");
	   System.out.println("	   during parser generation.");
	   throw new Error();
	 }
	 jj_initialized_once = true;
	 try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source = new ParserTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 6; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
	  ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
	 try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 6; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public Parser(java.io.Reader stream) {
	 if (jj_initialized_once) {
	   System.out.println("ERROR: Second call to constructor of static parser. ");
	   System.out.println("	   You must either use ReInit() or set the JavaCC option STATIC to false");
	   System.out.println("	   during parser generation.");
	   throw new Error();
	 }
	 jj_initialized_once = true;
	 jj_input_stream = new SimpleCharStream(stream, 1, 1);
	 token_source = new ParserTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 6; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
	if (jj_input_stream == null) {
	   jj_input_stream = new SimpleCharStream(stream, 1, 1);
	} else {
	   jj_input_stream.ReInit(stream, 1, 1);
	}
	if (token_source == null) {
 token_source = new ParserTokenManager(jj_input_stream);
	}

	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 6; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public Parser(ParserTokenManager tm) {
	 if (jj_initialized_once) {
	   System.out.println("ERROR: Second call to constructor of static parser. ");
	   System.out.println("	   You must either use ReInit() or set the JavaCC option STATIC to false");
	   System.out.println("	   during parser generation.");
	   throw new Error();
	 }
	 jj_initialized_once = true;
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 6; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(ParserTokenManager tm) {
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 6; i++) jj_la1[i] = -1;
  }

  static private Token jj_consume_token(int kind) throws ParseException {
	 Token oldToken;
	 if ((oldToken = token).next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 if (token.kind == kind) {
	   jj_gen++;
	   return token;
	 }
	 token = oldToken;
	 jj_kind = kind;
	 throw generateParseException();
  }


/** Get the next Token. */
  static final public Token getNextToken() {
	 if (token.next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 jj_gen++;
	 return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
	 Token t = token;
	 for (int i = 0; i < index; i++) {
	   if (t.next != null) t = t.next;
	   else t = t.next = token_source.getNextToken();
	 }
	 return t;
  }

  static private int jj_ntk_f() {
	 if ((jj_nt=token.next) == null)
	   return (jj_ntk = (token.next=token_source.getNextToken()).kind);
	 else
	   return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;

  /** Generate ParseException. */
  static public ParseException generateParseException() {
	 jj_expentries.clear();
	 boolean[] la1tokens = new boolean[17];
	 if (jj_kind >= 0) {
	   la1tokens[jj_kind] = true;
	   jj_kind = -1;
	 }
	 for (int i = 0; i < 6; i++) {
	   if (jj_la1[i] == jj_gen) {
		 for (int j = 0; j < 32; j++) {
		   if ((jj_la1_0[i] & (1<<j)) != 0) {
			 la1tokens[j] = true;
		   }
		 }
	   }
	 }
	 for (int i = 0; i < 17; i++) {
	   if (la1tokens[i]) {
		 jj_expentry = new int[1];
		 jj_expentry[0] = i;
		 jj_expentries.add(jj_expentry);
	   }
	 }
	 int[][] exptokseq = new int[jj_expentries.size()][];
	 for (int i = 0; i < jj_expentries.size(); i++) {
	   exptokseq[i] = jj_expentries.get(i);
	 }
	 return new ParseException(token, exptokseq, tokenImage);
  }

  static private boolean trace_enabled;

/** Trace enabled. */
  static final public boolean trace_enabled() {
	 return trace_enabled;
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

    }
